#!/bin/bash -e

# TASTE Dataview Editor

if [ -t 1 ] ; then
    COLORON="\e[1m\e[32m"
    REDCOLORON="\e[1m\e[31m"
    COLOROFF="\e[0m"
else
    COLORON=""
    REDCOLORON=""
    COLOROFF=""
fi

INFO="${COLORON}[INFO]${COLOROFF}"
ERROR="${REDCOLORON}[ERROR]${COLOROFF}"


# Find a suitable text editor, in order of priority: kate, gvim, vi
if [ ! -z $(which kate) ]
then
    EDITOR="kate -n"
elif [ ! -z $(which gvim) ]
then
    EDITOR="gvim -f"
else
    EDITOR=vi
fi

# If the script is running standalone you should check for command line params
if [ -z $NONINTERACTIVE ]
then
    OPTS=`getopt -o r:: --long rosmsgs:: -n 'taste-create-data-view' -- "$@"`
    eval set -- "$OPTS"

    while true ; do
        case "$1" in
            -r|--rosmsgs)
                GEN_ROS_MSGS=1
                case "$2" in
                    "") ROS_MSGS="" ; shift 2;;
                    *) ROS_MSGS=$2 ; shift 2;;
                esac ;;
            --) shift ; break;;
            *) echo "Unknown parameter $1 found" ; exit 1 ;;
        esac
    done
fi

if [ -f "DataView.asn" ]
then
    if [ -z $NONINTERACTIVE ]
    then
        echo -e "${INFO} Opening existing DataView.asn"
    fi
else
    if [ -z $NONINTERACTIVE ]
    then
        echo -e "${INFO} Creating a dummy ASN.1 file with a few type examples - feel free to add, edit, delete..."
    fi
    echo 'TASTE-Dataview DEFINITIONS ::=
BEGIN
IMPORTS T-Int32, T-UInt32, T-Int8, T-UInt8, T-Boolean FROM TASTE-BasicTypes;

TASTE-Boolean ::= BOOLEAN

-- ASN.1 Type definitions must start with an uppercase
-- Field names in records (SEQUENCE) must start with a lowercase
-- Underscores are not allowed: use dash (hyphen)

-- Simple types:

-- MyInteger   ::= INTEGER (0..255)
-- MyReal      ::= REAL (0.0 .. 1000.0)
-- MyBool      ::= BOOLEAN
-- MyEnum      ::= ENUMERATED { hello, world, how-are-you }

-- Complex types:

--  MySeq       ::= SEQUENCE {
--      input-data  MyInteger,
--      output-data MyInteger,
--      validity    ENUMERATED { valid, invalid }
--  }
--
--  MyChoice    ::= CHOICE {
--      a BOOLEAN,
--      b MySeq
--  }
--
--  MySeqOf     ::= SEQUENCE (SIZE (2)) OF MyEnum
--
--  MyOctStr    ::= OCTET STRING (SIZE (3))
--
--  -- You can also declare constants
--  myVar       MySeqOf     ::= { hello, world }

END
' > DataView.asn
echo 'TASTE-Dataview DEFINITIONS ::= BEGIN

    --  In this ACN model, you can specify custom binary encoding rules for
    --  your data types. For example if you require a specific memory layout
    --  for a record, or need to add padding fields, define endianness, etc.
    --  you can do that with ACN. Refer to the ACN user manual for details.

    --  TASTE-Boolean []
END
' > DataView.acn
fi

if [ -z $NONINTERACTIVE ]
then
    $EDITOR DataView.asn
    echo -e "${INFO} Converting the data view to AADL..."
fi

# cp $(taste-config --prefix)/share/taste-types/taste-types.asn .

# If ROS messages will be generated
if [ $GEN_ROS_MSGS ]
then
    # Generate TASTE extended types
    echo 'TASTE-ExtendedTypes DEFINITIONS ::=
    BEGIN

    IMPORTS
    T-Int32, T-UInt32, T-Int8, T-UInt8, T-Boolean  FROM TASTE-BasicTypes;

    -- Set of TASTE predefined basic types

    T-Double ::= REAL (-1.7976931348623157e+308..1.7976931348623157E308)

    T-Float ::= REAL (-3.402823466E+38..3.402823466e+38)

    T-Int16 ::= INTEGER (-32768..32767 )

    T-UInt16 ::= INTEGER (0 .. 65535 )

    T-UInt64 ::= INTEGER (0..9223372036854775807)

    T-Int64 ::= INTEGER (-9223372036854775808.. 9223372036854775807)

    -- Maximum string size
    maxSize-T-String T-UInt32 ::= 256

    T-String ::= OCTET STRING (SIZE(0..maxSize-T-String))

    END' > taste-extended-types.asn

    echo 'Time-Types DEFINITIONS ::=
    BEGIN
    IMPORTS T-UInt32 FROM TASTE-BasicTypes;
    Time   ::=
    SEQUENCE
    {
    sec             T-UInt32,
    nsec            T-UInt32
    }
    END' > time-types.asn

    if [ ${#ROS_MSGS} -eq 0 ]
    then
        echo "Interractive ROS message generation. Please enter the messages
        seperated by spaces."
        read -p "Messages: " ROS_MSGS
    fi
    echo "Generating the following messages: $ROS_MSGS"
    rosmsg_to_asn1.py -o ./asn_ros_msgs/ $ROS_MSGS
    taste-update-data-view DataView.asn time-types.asn taste-extended-types.asn ./asn_ros_msgs/*
else
    taste-update-data-view
fi

if [ -z $NONINTERACTIVE ]
then
    echo -e "${INFO} Data View created"
    echo -e "${INFO} Run taste-edit-data-view to edit"
    echo -e "${INFO}     taste-create-acn-model to specify binary encodings with ACN"
    echo -e "${INFO}     taste-create-project to create a new TASTE project"
fi
